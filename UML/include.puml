@startuml
class Exporter {
    + Export(applicationData:ApplicationData) : void
}
class SequenceNode {
    Start() : void
    + ClickButton() : void
    + ClickBack() : void
    + ChangeSprite() : void
    + SetSprites() : void
    + PlayClip() : IEnumerator
    + UpdateInstrument(_instrument:InstrumentType) : void
}
enum NoteType {
    none= 0,
    A= 1,
    B= 2,
    C= 3,
    D= 4,
    E= 5,
    F= 6,
    G= 7,
}
enum InstrumentType {
    Square,
    Sawtooth,
    Sine,
    Noise,
}
class NoteData {
    + name : string
    + sampleRate : int
    + frequency : float
    + duration : float
    + SetValues() : void
    + ChangeNote() : void
    + ClearNote() : void
    + CreateClip(_name:string, _samplerate:int, _frequency:float) : AudioClip
    + CreateSine(_size:int, _samplerate:int, _frequency:float) : float[]
    + CreateSquare(_size:int, _samplerate:int, _frequency:float) : float[]
    + CreateSawtooth(_size:int, _samplerate:int, _frequency:float) : float[]
    + CreateNoise(_size:int, _samplerate:int, _frequency:float) : float[]
}
class "Dictionary`2"<T1,T2> {
}
MonoBehaviour <|-- SequenceNode
SequenceNode --> "note" NoteData
SequenceNode --> "audioSource" AudioSource
SequenceNode o-> "sprite<string,Sprite>" "Dictionary`2"
NoteData --> "note" NoteType
NoteData --> "instrument" InstrumentType
class UIClickHandler {
    + OnPointerClick(eventData:PointerEventData) : void
}
MonoBehaviour <|-- UIClickHandler
IPointerClickHandler <|-- UIClickHandler
UIClickHandler --> "onLeftClick" UnityEvent
UIClickHandler --> "onRightClick" UnityEvent
UIClickHandler --> "onMiddleClick" UnityEvent
class Sequencer {
    + islooping : bool
    + NoteDuration : float <<get>> <<set>>
    + OnStart(_manager:ApplicationManager) : void
    + UpdateText() : void
    + PlayTheSequence(_sequence:NoteSequence, _source:AudioSource) : IEnumerator
}
class NoteSequence {
    + UpdateSequence() : void
    + UpdateNoteDuration(_duration:float) : void
    + SetSprites(sprites:InstrumentSprites) : void
    + ChangeInstrument() : void
    + ApplySequenceToNode(_notes:List<NoteData>) : void
    + GetData() : SequenceData
    + ApplyData(data:SequenceData) : void
}
class SequenceData {
}
class "List`1"<T> {
}
Sequencer --> "manager" ApplicationManager
Sequencer --> "noteDurationText" TextMeshProUGUI
NoteSequence o-> "notes<NoteData>" "List`1"
NoteSequence --> "sequenceInstrument" InstrumentType
SequenceData --> "notes<NoteData>" "List`1"
SequenceData --> "sequenceInstrument" InstrumentType
class NoteSprites {
}
ScriptableObject <|-- NoteSprites
NoteSprites --> "A" Sprite
NoteSprites --> "B" Sprite
NoteSprites --> "C" Sprite
NoteSprites --> "D" Sprite
NoteSprites --> "E" Sprite
NoteSprites --> "F" Sprite
NoteSprites --> "G" Sprite
NoteSprites --> "none" Sprite
class InstrumentSprites {
}
ScriptableObject <|-- InstrumentSprites
InstrumentSprites --> "squareSprite" Sprite
InstrumentSprites --> "sawtoothSprite" Sprite
InstrumentSprites --> "sineSprite" Sprite
InstrumentSprites --> "noiseSprite" Sprite
class SavWav <<static>> {
    <<const>> HEADER_SIZE : int = 44
    + {static} Save(filename:string, clip:AudioClip) : bool
    + {static} TrimSilence(clip:AudioClip, min:float) : AudioClip
    + {static} TrimSilence(samples:List<float>, min:float, channels:int, hz:int) : AudioClip
    + {static} TrimSilence(samples:List<float>, min:float, channels:int, hz:int, _3D:bool, stream:bool) : AudioClip
    {static} CreateEmpty(filepath:string) : FileStream
    {static} ConvertAndWrite(fileStream:FileStream, clip:AudioClip) : void
    {static} WriteHeader(fileStream:FileStream, clip:AudioClip) : void
}
class ApplicationManager {
    + Start() : void
    + Export() : void
    + Save() : void
    + Load() : void
    + ChangeInstrument(sequenceIndex:int) : void
    + MinNoteDuration() : void
    + PlusNoteDuration() : void
    + Play() : void
    + Stop() : void
    + Loop() : void
    + CloseApplication() : void
}
class ApplicationData {
    + ApplicationData()
    + ApplicationData(sequenceA:SequenceData, sequenceB:SequenceData, sequenceC:SequenceData, sequenceD:SequenceData)
}
class "List`1"<T> {
}
MonoBehaviour <|-- ApplicationManager
ApplicationManager --> "instrumentSprites" InstrumentSprites
ApplicationManager --> "sequenceBar" GameObject
ApplicationData --> "sequences<SequenceData>" "List`1"
@enduml
